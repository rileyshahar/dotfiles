#+TITLE: Emacs Config
#+AUTHOR: Riley Shahar
#+DESCRIPTION: My EMACS config.
#+OPTIONS: toc:2
#+PROPERTY: header-args :tangle "~/.config/emacs/init.el"
#+auto_tangle: t

My Emacs config, as a longtime (and heavily customized) Neovim user.

Note that any defined functions should be prefixed with ~rs/~ for namespacing purposes.

* Table of Contents :toc:
- [[#package-management][Package Management]]
  - [[#bootstrapping][Bootstrapping]]
  - [[#use-package][Use-package]]
- [[#keybinds][Keybinds]]
  - [[#general][General]]
  - [[#evil][Evil]]
  - [[#key-chords][Key Chords]]
  - [[#which-key][Which-Key]]
- [[#org][Org]]
  - [[#install][Install]]
  - [[#ret][Ret]]
  - [[#tangle][Tangle]]
  - [[#autolist][Autolist]]
  - [[#bullets][Bullets]]
  - [[#table-of-contents][Table of Contents]]
- [[#completion][Completion]]
- [[#user-interface][User Interface]]
  - [[#declutter][Declutter]]
  - [[#colors][Colors]]
  - [[#font][Font]]
  - [[#line-numbers][Line Numbers]]
  - [[#notifications][Notifications]]
- [[#misc][Misc]]
  - [[#troubleshooting][Troubleshooting]]
  - [[#custom-file][Custom File]]
- [[#sources][Sources]]

* Package Management
Straight is a modern package manager for emacs.

** Bootstrapping
The following code comes directly from their github.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

We also need to add the following file to prevent ~package.el~ from
loading (note that this block is tangled to ~early-init.el~):

#+begin_src emacs-lisp :tangle "~/.config/emacs/early-init.el"
  (setq package-enable-at-startup nil)
#+end_src

** Use-package
We can make straight work with use-package.

First, install use-package:
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

Second, configure it to use straight:
#+begin_src emacs-lisp
  (use-package straight
    :custom
    (straight-use-package-by-default t))
#+end_src

* Keybinds

** General
General makes it easier to set keybindings, especially prefixed.

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t))
#+end_src

*** Leaders
General supports leader keys, like vim. Note that we need to tell
general to let us use arbitrary keys as a prefix.

#+begin_src emacs-lisp(general-auto-unbind-keys)
(general-auto-unbind-keys)

(general-create-definer rs/leader-def
  :keymaps 'normal
  :prefix ",")

(general-create-definer rs/local-leader-def
  :keymaps 'normal
  :prefix "\\")
#+end_src

*** Test
#+begin_src emacs-lisp
  (rs/leader-def
    "bp" '(previous-buffer :wk "previous buffer"))
#+end_src

** Evil
Evil provides vim-like bindings for emacs.

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode)
    (evil-set-undo-system 'undo-redo))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ; vim-surround for evil mode
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src

*** Mode Switching
We can use general with key chords to exist insert mode.

#+begin_src emacs-lisp
  (general-define-key
   :keymaps 'evil-insert-state-map
   (general-chord "jk") '(evil-normal-state :wk "exit insert mode"))
#+end_src

** Key Chords
The key-chord library supports key chords. We use it in particular for
binding `jk` to exit insert mode.

#+begin_src emacs-lisp
  (use-package key-chord
    :config
    (key-chord-mode 1))

  (setq key-chord-two-keys-delay 0.5)
  (setq key-chord-safety-interval-backward 0.0) ; always interpret a key as starting a chord
  (setq key-chord-safety-interval-forward 0.0)  ; always immediately execute a chord which completes
#+end_src

** Which-Key
Which-key shows a popup list of keybindings in waiting-for-key mode.

#+begin_src emacs-lisp
  (use-package which-key)
  (which-key-mode)
#+end_src

* Org
Org-mode is a general-purpose note-taking framework.

** Install
We need to setup indent mode to ensure that org auto-indents.

#+begin_src emacs-lisp
  (defun rs/org-mode-setup ()
    (org-indent-mode))
#+end_src

And now we can install.

#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . rs/org-mode-setup)
    :config
    (setq org-ellipsis " â–¾") ; sets symbol for collapsed headers
    (setq org-return-follows-link t))
#+end_src

** Ret
Evil mode messes with ~RET~, and does something not that useful with
it anyway, so we rebind it to org's ~RET~.

#+begin_src emacs-lisp
  (general-def org-mode-map
   "RET" '(org-return :wk "return"))
#+end_src

** Tangle
This package automatically tangles when the metadata

#+begin_src org :tangle no
    #+auto_tangle: t
#+end_src

is set.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Autolist
This package automatically continues lists.

#+begin_src emacs-lisp
  (use-package org-autolist
    :hook (org-mode . org-autolist-mode))
#+end_src

** Bullets
This package makes bullets look better.

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src

** Table of Contents
This package enables tables of contents.

#+begin_src emacs-lisp
  (use-package toc-org
      :commands toc-org-enable
      :hook (org-mode . toc-org-enable))
#+end_src

* Completion
We use a number of packages for better completion.

#+begin_src emacs-lisp
  ; completion
  (use-package vertico
    :config
    (vertico-mode))

  ; order completions
  (use-package orderless
    :config
    (setq completion-styles '(orderless)))

  ; annotate completions
  (use-package marginalia
    :config
    (marginalia-mode))
#+end_src

* User Interface
** Declutter
Remove UI clutter.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; disable visible scrollbar
  (tool-bar-mode -1)          ; disable the toolbar
  (tooltip-mode -1)           ; disable tooltips
  (menu-bar-mode -1)          ; disable the menu bar
  (set-fringe-mode 0)         ; disable padding
#+end_src

** Colors
Set theme.

#+begin_src emacs-lisp
  ; theme
  (use-package doom-themes)
  (load-theme 'doom-one t)
#+end_src

** Font
Set the font.

#+begin_src emacs-lisp
  ; dependency: icons
  (use-package all-the-icons)

  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font")
#+end_src

Italicize comments:

#+begin_src emacs-lisp
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
#+end_src

** Line Numbers
Show line numbers.

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
#+end_src

** Notifications
Improve notifications settings.

#+begin_src emacs-lisp
  (setq visible-bell t)                                   ; set visual instead of audio bell
  (doom-themes-visual-bell-config)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit) ; Make ESC quit prompts
#+end_src

* Misc
This section is just potpurri that we have to do.

** Troubleshooting
This package performs binary search on ~init.el~ to find the source of a bug.

#+begin_src emacs-lisp
  (use-package bug-hunter)
#+end_src

*** Usage
To use, run ~bug-hunter-init-file~.

** Custom File
We have a separate custom file so it doesn't clutter our config.

#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

* Sources
- https://youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ
- https://gitlab.com/dwt1/configuring-emacs
