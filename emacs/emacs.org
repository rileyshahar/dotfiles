#+TITLE: Emacs Config
#+AUTHOR: Riley Shahar
#+DESCRIPTION: My EMACS config.
#+OPTIONS: toc:2
#+PROPERTY: header-args :tangle "~/.config/emacs/init.el"
#+auto_tangle: t

My Emacs config, as a longtime (and heavily customized) Neovim user.

Note that any defined functions should be prefixed with ~rs/~ for namespacing purposes.

* Package Management
Here we install package archives, in particular ensuring that we get
the newest `org` by getting it from its website.
  
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                          ("org" . "https://orgmode.org/elpa/")
                          ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (require 'use-package)
  ; always ensure packages are loaded
  (setq use-package-always-ensure t)
#+end_src

* Keybinds
** General
General makes it easier to set keybindings, especially prefixed.

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t))
#+end_src

*** Leaders
General supports leader keys, like vim.

#+begin_src emacs-lisp
(general-create-definer rs/leader-def
  :prefix ",")

(general-create-definer rs/local-leader-def
  :prefix "\\")
#+end_src

** Evil
Evil provides vim-like bindings for emacs.

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode)
    (define-key evil-insert-state-map (kbd "<C-return>") 'evil-normal-state)
    (evil-set-undo-system 'undo-redo))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ; vim-surround for evil mode
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src

** Key Chords
The key-chord library supports key chords. We use it in particular for
binding `jk` to exit insert mode.

#+begin_src emacs-lisp
  (use-package key-chord
    :config
    (key-chord-mode 1))

  (setq key-chord-two-keys-delay 0.5)
  (setq key-chord-safety-interval-backward 0.0) ; always interpret a key as starting a chord
  (setq key-chord-safety-interval-forward 0.0)  ; always immediately execute a chord which completes
  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
  (key-chord-mode 1)
#+end_src

** Which-Key
Which-key shows a popup list of keybindings in waiting-for-key mode.

#+begin_src emacs-lisp :tangle no
  (use-package which-key)
  (which-key-mode)
#+end_src

* Org
Org-mode is a general-purpose note-taking framework.

#+begin_src emacs-lisp
  (defun rs/org-mode-setup ()
    (org-indent-mode))

  (use-package org
    :hook (org-mode . rs/org-mode-setup)
    :config
    (setq org-ellipsis " â–¾")
    (setq org-return-follows-link t))

  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))

  ; auto continue lists
  (use-package org-autolist
    :hook (org-mode . org-autolist-mode))
#+end_src

* Completion
We use a number of packages for better completion.

#+begin_src emacs-lisp
  ; completion
  (use-package vertico
    :config
    (vertico-mode))

  ; order completions
  (use-package orderless
    :config
    (setq completion-styles '(orderless)))

  ; annotate completions
  (use-package marginalia
    :config
    (marginalia-mode))
#+end_src

* User Interface
** Declutter
Remove UI clutter.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; disable visible scrollbar
  (tool-bar-mode -1)          ; disable the toolbar
  (tooltip-mode -1)           ; disable tooltips
  (menu-bar-mode -1)          ; disable the menu bar
  (set-fringe-mode 0)         ; disable padding
#+end_src

** Colors
Set theme.

#+begin_src emacs-lisp
  ; theme
  (use-package doom-themes)
  (load-theme 'doom-one t)
#+end_src

** Modeline
Set modeline.

#+begin_src emacs-lisp
  ; dependency: icons
  (use-package all-the-icons)

  ; prettier modeline
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode))
#+end_src

** Font
Set the font.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "MesloLGS Nerd Font 11")
#+end_src

** Line Numbers
Show line numbers.

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
#+end_src

** Notifications
Improve notifications settings.

#+begin_src emacs-lisp
  (setq visible-bell t)                                   ; set visual instead of audio bell
  (doom-themes-visual-bell-config)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit) ; Make ESC quit prompts
#+end_src

* Misc
This section is just potpurri that we have to do.

** Custom File
We have a separate custom file so it doesn't clutter our config.

#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

* Sources
- https://youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ
